document_analysis_task:
  description: >
    Analyze the provided resume using PDF tool. Extract and summarize all critical information, including work experience, skills, education, and key achievements.
    Present the output as a clean, well-structured text summary. Do not use JSON.
  agent: document_analyzer
  expected_output: |
    A clean, well-formatted text summary of the resume's content. Example:

    **Personal Details**
    - Name: [Full Name extracted from resume]
    - Email: [Email Address]
    - Phone: [Phone Number]
    - LinkedIn: [LinkedIn Profile URL]
    - Location: [City, Country]

    **Summary**
    [Candidate's professional summary or objective]

    **Work Experience**
    - **[Job Title]** at [Company Name] | [Location] | [Start Date] - [End Date]
      - [Responsibility or achievement 1]
      - [Responsibility or achievement 2]
    - **[Previous Job Title]** at [Previous Company Name] | [Location] | [Start Date] - [End Date]
      - [Responsibility or achievement 1]

    **Education**
    - **[Degree]** in [Field of Study] - [University Name], [Location] ([Graduation Year])
      - Relevant Coursework: [List of relevant courses]

    **Skills**
    - Technical: [List of technical skills, e.g., Python, SQL, SAP]
    - Languages: [List of languages and proficiency, e.g., English (C1), French (B2)]
    - Certifications: [List of relevant certifications]

    **Projects**
    - **[Project Name]** ([Year])
      - [Brief project description and technologies used]

candidate_matching_task:
  description: >
    Apply the scoring matrix with ABSOLUTE consistency. Follow the evidence classification rules exactly.
    Use the mandatory scoring algorithm without any deviation.
    
    CRITICAL SCORING ALGORITHM:
    1. For each skill in {barem}, search resume for exact evidence
    2. Classify evidence using the 5-point matrix (0-5)
    3. **CONVERT WEIGHT TO DECIMAL**: If weight shows as 20, use 0.20 in calculation
    4. Calculate weighted contribution: (individual_score/5) * (weight/100)
    5. Sum ALL weighted contributions to get final score out of 10
    
    WEIGHT CONVERSION EXAMPLES:
    - Weight shows 30 → Use 0.30 → Calculation: (4/5) * 0.30 = 0.24
    - Weight shows 25 → Use 0.25 → Calculation: (3/5) * 0.25 = 0.15  
    - Weight shows 20 → Use 0.20 → Calculation: (5/5) * 0.20 = 0.20
    
    SCORING MATRIX:
    0/5 = No evidence found
    1/5 = Minimal evidence 
    2/5 = Basic evidence
    3/5 = Good evidence
    4/5 = Strong evidence
    5/5 = Excellent evidence
    
    For each skill in {barem}, you MUST:
    1. Quote the exact evidence from resume
    2. State which classification it falls under (0/5, 1/5, 2/5, 3/5, 4/5, or 5/5)
    3. Apply the corresponding score from the matrix
    4. Show the calculation: (score/5) * (weight/100) = weighted_points
    5. At the end, sum all weighted_points for final score out of 10
    
  agent: matching_specialist
  expected_output: |
    **DETERMINISTIC SCORING ANALYSIS**
    
    **DETAILED BREAKDOWN:**
    
    ### [Skill Name] (Weight: [X]%)
    **Evidence:** "[Exact quote from resume or 'Not found']"
    **Classification:** [0/5, 1/5, 2/5, 3/5, 4/5, or 5/5] - [Brief justification]
    **Calculation:** ([score]/5) * ([weight]/100) = [weighted_points]
    
    ### [Next Skill] (Weight: [X]%)
    **Evidence:** "[Exact quote from resume or 'Not found']"
    **Classification:** [0/5, 1/5, 2/5, 3/5, 4/5, or 5/5] - [Brief justification]
    **Calculation:** ([score]/5) * ([weight]/100) = [weighted_points]
    
    [Continue for all skills in barem...]
    
    **TOTAL CALCULATION:**
    Sum of weighted points: [sum of all weighted_points]
    Final score: [sum] = [X.X]/10


report_generation_task:
  description: >
    Generate a comprehensive hiring report using the ReportModel Pydantic schema. Extract all relevant information from the document analysis and candidate matching tasks to populate the structured JSON output.
    
    CRITICAL REQUIREMENTS:
    1. Use ONLY the ReportModel schema fields - do not add extra fields
    2. Extract candidate name/full name, experience, background, and current job title from document analysis
    3. Use the exact final score from matching_specialist (X.X/10 format) - do NOT modify this score
    4. Parse scoring details into ScoreDetail objects with section, raw_score, weight, and weighted_score
    5. Categorize findings into strengths and gaps lists
    6. Provide clear analysis and rationale based on the scoring
    7. Include risk assessment and next steps when applicable
    
    Focus on objective analysis of the candidate's match to the requirements based on their score out of 10.
    
    The output must be valid JSON that conforms exactly to the ReportModel Pydantic schema.
  agent: report_generator
  expected_output: |
    {
      "applied_job_title": "[Job Title from user input({job_title})]",
      "applied_job_description": "[Job description provided by user input({job_description})]",
      "candidate_name": "[Full name]",
      "candidate_job_title": "[Current job title/role of the candidate]",
      "candidate_experience": "[Years of experience, e.g., '5 years']",
      "candidate_background": "[Current role or background summary]",
      "requirements_analysis": [
        "[Requirement 1 based on job description]",
        "[Requirement 2 based on job description]",
        "[Requirement 3 based on job description]"
      ],
      "match_results": {
        "technical_skills": "[Summary of technical skill matches]",
        "experience_level": "[Experience level assessment]",
        "education": "[Education match assessment]",
        "certifications": "[Certification matches]"
      },
      "scoring_weights": {
        "[Skill/Criteria 1]": 0.25,
        "[Skill/Criteria 2]": 0.20,
        "[Skill/Criteria 3]": 0.15,
        "[Skill/Criteria 4]": 0.40
      },
      "score_details": [
        {
          "section": "[Skill/Criteria Name]",
          "raw_score": 4.0,
          "weight": 25.0,
          "weighted_score": 2.0
        },
        {
          "section": "[Another Skill/Criteria]",
          "raw_score": 2.0,
          "weight": 20.0,
          "weighted_score": 0.8
        }
      ],
      "total_weighted_score": 6.5,
      "strengths": [
        "[Strength 1 - specific skill or experience]",
        "[Strength 2 - notable achievement or competency]",
        "[Strength 3 - relevant background or qualification]"
      ],
      "gaps": [
        "[Gap 1 - missing skill or experience]",
        "[Gap 2 - area needing development]",
        "[Gap 3 - qualification or certification gap]"
      ],
      "rationale": "[Detailed analysis and insights based on score and evaluation]",
      "risk": "[Optional: Any risks or concerns to consider]",
      "next_steps": [
        "[Next step 1 - e.g., Technical interview focus]",
        "[Next step 2 - e.g., Reference check priorities]",
        "[Next step 3 - e.g., Skills assessment recommendations]"
      ]
    }
    