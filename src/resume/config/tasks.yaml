document_analysis_task:
  description: >
    Analyze the provided resume using PDF tool. Extract and summarize all critical information, including work experience, skills, education, and key achievements.
    Present the output as a clean, well-structured text summary. Do not use JSON.
  agent: document_analyzer
  expected_output: |
    A clean, well-formatted text summary of the resume's content. Example:

    **Personal Details**
    - Name: [Full Name extracted from resume]
    - Email: [Email Address]
    - Phone: [Phone Number]
    - LinkedIn: [LinkedIn Profile URL]
    - Location: [City, Country]

    **Summary**
    [Candidate's professional summary or objective]

    **Work Experience**
    - **[Job Title]** at [Company Name] | [Location] | [Start Date] - [End Date]
      - [Responsibility or achievement 1]
      - [Responsibility or achievement 2]
    - **[Previous Job Title]** at [Previous Company Name] | [Location] | [Start Date] - [End Date]
      - [Responsibility or achievement 1]

    **Education**
    - **[Degree]** in [Field of Study] - [University Name], [Location] ([Graduation Year])
      - Relevant Coursework: [List of relevant courses]

    **Skills**
    - Technical: [List of technical skills, e.g., Python, SQL, SAP]
    - Languages: [List of languages and proficiency, e.g., English (C1), French (B2)]
    - Certifications: [List of relevant certifications]

    **Projects**
    - **[Project Name]** ([Year])
      - [Brief project description and technologies used]

candidate_matching_task:
  description: >
    Apply the scoring matrix with ABSOLUTE mathematical precision. Follow the evidence classification rules exactly.
    Use the mandatory scoring algorithm without any deviation to achieve a final score out of 10.
    
    CRITICAL SCORING ALGORITHM (MATHEMATICAL PRECISION REQUIRED):
    1. For each skill in {barem}, search resume for exact evidence
    2. Classify evidence using the 5-point matrix (0-5)
    3. **DECIMAL CONVERSION**: Convert percentage weights to decimals (20% → 0.20)
    4. **WEIGHTED CALCULATION**: (individual_score/5) × decimal_weight = weighted_contribution
    5. **FINAL SCORE**: Sum ALL weighted_contributions = score out of 10
    
    WEIGHT CONVERSION TABLE (MEMORIZE THIS):
    | Weight % | Decimal | Example Calculation |
    |----------|---------|-------------------|
    | 30% → 0.30 | (4/5) × 0.30 = 0.24 |
    | 25% → 0.25 | (3/5) × 0.25 = 0.15 |
    | 20% → 0.20 | (5/5) × 0.20 = 0.20 |
    | 15% → 0.15 | (2/5) × 0.15 = 0.06 |
    | 10% → 0.10 | (4/5) × 0.10 = 0.08 |
    
    EVIDENCE CLASSIFICATION MATRIX:
    - 5/5 = Excellent: Multiple years direct experience + advanced proficiency + recent usage
    - 4/5 = Strong: Direct experience + good proficiency OR equivalent skills with proof
    - 3/5 = Good: Some direct experience OR strong equivalent skills
    - 2/5 = Basic: Limited experience OR distantly related skills
    - 1/5 = Minimal: Implied knowledge only
    - 0/5 = None: No evidence whatsoever
    
    EQUIVALENT SKILLS RECOGNITION:
    - Business Intelligence: Power BI = Tableau = QlikView = Looker (all score equally)
    - Programming: SQL = T-SQL = PL/SQL (database variations count)  
    - Languages: "Bilingue" = B2+ level, "Courant" = B2 level
    - Agile: SCRUM = Kanban = SAFe (all count as Agile Methodology)
    
    FEW-SHOT EXAMPLES:
    
    **EXAMPLE 1 - Correct Calculation:**
    Skill: Power BI (Weight: 20%)
    Evidence: "Managed Power BI projects and dashboards for 3 years at Company X"
    Classification: 4/5 (Strong evidence)
    Calculation: (4/5) × 0.20 = 0.16
    
    **EXAMPLE 2 - Equivalent Skill Recognition:**
    Job requires: IBM Cognos
    Resume shows: "Extensive Power BI and Tableau experience"
    Classification: 3/5 (Good - equivalent BI tools)
    Weight: 15%
    Calculation: (3/5) × 0.15 = 0.09
    
    **EXAMPLE 3 - No Evidence:**
    Skill: Agile Methodology (Weight: 10%)
    Evidence: No mention of SCRUM, Agile, Kanban anywhere
    Classification: 0/5 (No evidence)
    Calculation: (0/5) × 0.10 = 0.00
    
    **EXAMPLE 4 - Complete Scoring:**
    Skills Assessment:
    - Business Intelligence: 4/5, Weight 25% → (4/5) × 0.25 = 0.20
    - Programming: 3/5, Weight 20% → (3/5) × 0.20 = 0.12  
    - Experience: 5/5, Weight 20% → (5/5) × 0.20 = 0.20
    - Languages: 4/5, Weight 15% → (4/5) × 0.15 = 0.12
    - Education: 2/5, Weight 20% → (2/5) × 0.20 = 0.08
    
    FINAL CALCULATION: 0.20 + 0.12 + 0.20 + 0.12 + 0.08 = 0.72
    FINAL SCORE: 7.2/10
    
    MANDATORY OUTPUT FORMAT:
    For each skill category, you MUST provide:
    
    ```
    ## DETAILED SCORING BREAKDOWN
    
    **[Category Name]** (Weight: X%)
    - Evidence: "[Exact quote from resume]"
    - Classification: X/5 - [Excellent/Strong/Good/Basic/Minimal/None]
    - Calculation: (X/5) × 0.XX = 0.XX
    
    ## MATHEMATICAL VERIFICATION
    Category 1: 0.XX
    Category 2: 0.XX  
    Category 3: 0.XX
    [... all categories]
    
    **TOTAL SUM**: 0.XX + 0.XX + 0.XX + ... = X.XX
    **FINAL SCORE**: X.X/10
    ```
    
    CRITICAL QUALITY CONTROLS:
    1. **Evidence Validation**: Every score ≥ 2 MUST have supporting quotes
    2. **Mathematical Check**: Final score MUST equal sum of all weighted contributions
    3. **Decimal Precision**: Use exactly 2 decimal places in calculations
    4. **Equivalent Skills**: Recognize transferable skills appropriately
    5. **Consistency Verification**: Similar evidence patterns should yield similar scores
    
    COMMON ERRORS TO AVOID:
     Using percentage weights directly in calculation (20 instead of 0.20)
     Forgetting to divide individual scores by 5
     Not recognizing equivalent skills (penalizing Power BI when job needs Tableau)
     Mathematical errors in final summation
     Not providing exact evidence quotes for scores ≥ 2
    
    Remember: The final score represents a candidate's overall match percentage converted to a 10-point scale.
    A score of 7.2/10 means the candidate matches 72% of the job requirements.
    
  agent: matching_specialist
  expected_output: |
    **DETERMINISTIC SCORING ANALYSIS**
    
    **DETAILED BREAKDOWN:**
    
    ### [Skill Name] (Weight: [X]%)
    **Evidence:** "[Exact quote from resume or 'Not found']"
    **Classification:** [0/5, 1/5, 2/5, 3/5, 4/5, or 5/5] - [Brief justification]
    **Calculation:** ([score]/5) * ([weight]/100) = [weighted_points]
    
    ### [Next Skill] (Weight: [X]%)
    **Evidence:** "[Exact quote from resume or 'Not found']"
    **Classification:** [0/5, 1/5, 2/5, 3/5, 4/5, or 5/5] - [Brief justification]
    **Calculation:** ([score]/5) * ([weight]/100) = [weighted_points]
    
    [Continue for all skills in barem...]
    
    **TOTAL CALCULATION:**
    Sum of weighted points: [sum of all weighted_points]
    Final score: [sum] = [X.X]/10


report_generation_task:
  description: >
    Generate a comprehensive hiring report using the ReportModel Pydantic schema. Extract all relevant information from the document analysis and candidate matching tasks to populate the structured JSON output.
    
    CRITICAL REQUIREMENTS:
    1. Use ONLY the ReportModel schema fields - do not add extra fields
    2. Extract candidate name/full name, experience, background, and current job title from document analysis
    3. Use the exact final score from matching_specialist (X.X/10 format) - do NOT modify this score
    4. Parse scoring details into ScoreDetail objects with section, raw_score, weight, and weighted_score
    5. Categorize findings into strengths and gaps lists
    6. Provide clear analysis and rationale based on the scoring
    7. Include risk assessment and next steps when applicable
    
    Focus on objective analysis of the candidate's match to the requirements based on their score out of 10.
    
    The output must be valid JSON that conforms exactly to the ReportModel Pydantic schema.
  agent: report_generator
  expected_output: |
    {
      "applied_job_title": "[Job Title from user input({job_title})]",
      "applied_job_description": "[Job description provided by user input({job_description})]",
      "candidate_name": "[Full name]",
      "candidate_job_title": "[Current job title/role of the candidate]",
      "candidate_experience": "[Years of experience, e.g., '5 years']",
      "candidate_background": "[Current role or background summary]",
      "requirements_analysis": [
        "[Requirement 1 based on job description]",
        "[Requirement 2 based on job description]",
        "[Requirement 3 based on job description]"
      ],
      "match_results": {
        "technical_skills": "[Summary of technical skill matches]",
        "experience_level": "[Experience level assessment]",
        "education": "[Education match assessment]",
        "certifications": "[Certification matches]"
      },
      "scoring_weights": {
        "[Skill/Criteria 1]": 0.25,
        "[Skill/Criteria 2]": 0.20,
        "[Skill/Criteria 3]": 0.15,
        "[Skill/Criteria 4]": 0.40
      },
      "score_details": [
        {
          "section": "[Skill/Criteria Name]",
          "raw_score": 4.0,
          "weight": 25.0,
          "weighted_score": 2.0
        },
        {
          "section": "[Another Skill/Criteria]",
          "raw_score": 2.0,
          "weight": 20.0,
          "weighted_score": 0.8
        }
      ],
      "total_weighted_score": 6.5,
      "strengths": [
        "[Strength 1 - specific skill or experience]",
        "[Strength 2 - notable achievement or competency]",
        "[Strength 3 - relevant background or qualification]"
      ],
      "gaps": [
        "[Gap 1 - missing skill or experience]",
        "[Gap 2 - area needing development]",
        "[Gap 3 - qualification or certification gap]"
      ],
      "rationale": "[Detailed analysis and insights based on score and evaluation]",
      "risk": "[Optional: Any risks or concerns to consider]",
      "next_steps": [
        "[Next step 1 - e.g., Technical interview focus]",
        "[Next step 2 - e.g., Reference check priorities]",
        "[Next step 3 - e.g., Skills assessment recommendations]"
      ]
    }
    